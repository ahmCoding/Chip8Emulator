typedef unsigned char Uchar;
typedef Uchar RAM;
typedef Uchar REGISTER_8bit;
typedef unsigned short Ushort;
class Chip8
{
private:
    Ushort opcode;
    RAM memory[4096];
    REGISTER_8bit v[16];
    Ushort index, pc;
    Uchar screen[64 * 32];
    Uchar delayTimer;
    Uchar soundTimer;
    REGISTER_8bit sp;
    Ushort stack[16];
    Uchar key[16];
    Uchar fontSet[80] = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

public:
    void initialize();
    void loadGame();
    void emulateCycle();
    void setDelayTimer(Uchar &t);
    Uchar getDelayTimer();
    void setSoundTimer(Uchar &t);
    Uchar getSoundTimer();
};